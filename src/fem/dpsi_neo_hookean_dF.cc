#include "dpsi_neo_hookean_dF.h"

namespace nm::fem {

    auto dpsiNeoHookeanDf(const mat3r &F, real mu, real lambda) -> vec9r {
        vec9r dpsi;
        const auto F1_1 = F(0, 0);
        const auto F1_2 = F(0, 1);
        const auto F1_3 = F(0, 2);
        const auto F2_1 = F(1, 0);
        const auto F2_2 = F(1, 1);
        const auto F2_3 = F(1, 2);
        const auto F3_1 = F(2, 0);
        const auto F3_2 = F(2, 1);
        const auto F3_3 = F(2, 2);

        dpsi(0) = mu * (F1_1 * 2.0 - ((F2_2 * F3_3 - F2_3 * F3_2) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) -
                  lambda * (F2_2 * F3_3 - F2_3 * F3_2) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(1) = mu * (F2_1 * 2.0 + ((F1_2 * F3_3 - F1_3 * F3_2) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) +
                  lambda * (F1_2 * F3_3 - F1_3 * F3_2) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(2) = mu * (F3_1 * 2.0 - ((F1_2 * F2_3 - F1_3 * F2_2) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) -
                  lambda * (F1_2 * F2_3 - F1_3 * F2_2) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(3) = mu * (F1_2 * 2.0 + ((F2_1 * F3_3 - F2_3 * F3_1) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) +
                  lambda * (F2_1 * F3_3 - F2_3 * F3_1) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(4) = mu * (F2_2 * 2.0 - ((F1_1 * F3_3 - F1_3 * F3_1) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) -
                  lambda * (F1_1 * F3_3 - F1_3 * F3_1) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(5) = mu * (F3_2 * 2.0 + ((F1_1 * F2_3 - F1_3 * F2_1) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) +
                  lambda * (F1_1 * F2_3 - F1_3 * F2_1) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(6) = mu * (F1_3 * 2.0 - ((F2_1 * F3_2 - F2_2 * F3_1) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) -
                  lambda * (F2_1 * F3_2 - F2_2 * F3_1) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(7) = mu * (F2_3 * 2.0 + ((F1_1 * F3_2 - F1_2 * F3_1) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) +
                  lambda * (F1_1 * F3_2 - F1_2 * F3_1) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;
        dpsi(8) = mu * (F3_3 * 2.0 - ((F1_1 * F2_2 - F1_2 * F2_1) * 2.0) /
                                             (F1_1 * F2_2 * F3_3 - F1_1 * F2_3 * F3_2 - F1_2 * F2_1 * F3_3 +
                                              F1_2 * F2_3 * F3_1 + F1_3 * F2_1 * F3_2 - F1_3 * F2_2 * F3_1)) -
                  lambda * (F1_1 * F2_2 - F1_2 * F2_1) *
                          (-F1_1 * F2_2 * F3_3 + F1_1 * F2_3 * F3_2 + F1_2 * F2_1 * F3_3 - F1_2 * F2_3 * F3_1 -
                           F1_3 * F2_1 * F3_2 + F1_3 * F2_2 * F3_1 + 1.0) *
                          2.0;

        return dpsi;
    }
}// namespace nm::fem
